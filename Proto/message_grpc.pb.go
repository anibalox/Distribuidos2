// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaboratorioClient is the client API for Laboratorio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaboratorioClient interface {
	Intercambio(ctx context.Context, opts ...grpc.CallOption) (Laboratorio_IntercambioClient, error)
	Finalizar(ctx context.Context, in *MessageFin, opts ...grpc.CallOption) (*MessageFin, error)
}

type laboratorioClient struct {
	cc grpc.ClientConnInterface
}

func NewLaboratorioClient(cc grpc.ClientConnInterface) LaboratorioClient {
	return &laboratorioClient{cc}
}

func (c *laboratorioClient) Intercambio(ctx context.Context, opts ...grpc.CallOption) (Laboratorio_IntercambioClient, error) {
	stream, err := c.cc.NewStream(ctx, &Laboratorio_ServiceDesc.Streams[0], "/grpc.Laboratorio/Intercambio", opts...)
	if err != nil {
		return nil, err
	}
	x := &laboratorioIntercambioClient{stream}
	return x, nil
}

type Laboratorio_IntercambioClient interface {
	Send(*MessageInter) error
	Recv() (*MessageInter, error)
	grpc.ClientStream
}

type laboratorioIntercambioClient struct {
	grpc.ClientStream
}

func (x *laboratorioIntercambioClient) Send(m *MessageInter) error {
	return x.ClientStream.SendMsg(m)
}

func (x *laboratorioIntercambioClient) Recv() (*MessageInter, error) {
	m := new(MessageInter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *laboratorioClient) Finalizar(ctx context.Context, in *MessageFin, opts ...grpc.CallOption) (*MessageFin, error) {
	out := new(MessageFin)
	err := c.cc.Invoke(ctx, "/grpc.Laboratorio/Finalizar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaboratorioServer is the server API for Laboratorio service.
// All implementations must embed UnimplementedLaboratorioServer
// for forward compatibility
type LaboratorioServer interface {
	Intercambio(Laboratorio_IntercambioServer) error
	Finalizar(context.Context, *MessageFin) (*MessageFin, error)
	mustEmbedUnimplementedLaboratorioServer()
}

// UnimplementedLaboratorioServer must be embedded to have forward compatible implementations.
type UnimplementedLaboratorioServer struct {
}

func (UnimplementedLaboratorioServer) Intercambio(Laboratorio_IntercambioServer) error {
	return status.Errorf(codes.Unimplemented, "method Intercambio not implemented")
}
func (UnimplementedLaboratorioServer) Finalizar(context.Context, *MessageFin) (*MessageFin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finalizar not implemented")
}
func (UnimplementedLaboratorioServer) mustEmbedUnimplementedLaboratorioServer() {}

// UnsafeLaboratorioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaboratorioServer will
// result in compilation errors.
type UnsafeLaboratorioServer interface {
	mustEmbedUnimplementedLaboratorioServer()
}

func RegisterLaboratorioServer(s grpc.ServiceRegistrar, srv LaboratorioServer) {
	s.RegisterService(&Laboratorio_ServiceDesc, srv)
}

func _Laboratorio_Intercambio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LaboratorioServer).Intercambio(&laboratorioIntercambioServer{stream})
}

type Laboratorio_IntercambioServer interface {
	Send(*MessageInter) error
	Recv() (*MessageInter, error)
	grpc.ServerStream
}

type laboratorioIntercambioServer struct {
	grpc.ServerStream
}

func (x *laboratorioIntercambioServer) Send(m *MessageInter) error {
	return x.ServerStream.SendMsg(m)
}

func (x *laboratorioIntercambioServer) Recv() (*MessageInter, error) {
	m := new(MessageInter)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Laboratorio_Finalizar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageFin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratorioServer).Finalizar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Laboratorio/Finalizar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratorioServer).Finalizar(ctx, req.(*MessageFin))
	}
	return interceptor(ctx, in, info, handler)
}

// Laboratorio_ServiceDesc is the grpc.ServiceDesc for Laboratorio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Laboratorio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Laboratorio",
	HandlerType: (*LaboratorioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Finalizar",
			Handler:    _Laboratorio_Finalizar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Intercambio",
			Handler:       _Laboratorio_Intercambio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
